{
	"name": "Conditinal Split",
	"properties": {
		"description": "It is used to separate the data by the condition",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText8",
						"type": "DatasetReference"
					},
					"name": "ConditionalSpilt",
					"description": "it is used to separate the data from the dataset by the condition"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DelimitedText11",
						"type": "DatasetReference"
					},
					"name": "ClassRoomA"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText12",
						"type": "DatasetReference"
					},
					"name": "ClassRoomB"
				}
			],
			"transformations": [
				{
					"name": "SeperationofStudents"
				},
				{
					"name": "RollNumberArrangement1"
				},
				{
					"name": "RollNumberArrangement2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ID as short,",
				"          Name as string,",
				"          Gender as string,",
				"          {Age } as short,",
				"          Salary as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> ConditionalSpilt",
				"ConditionalSpilt split(ID < 460,",
				"     ID > 460,",
				"     disjoint: false) ~> SeperationofStudents@(SeperationofClassA, SeperationofClassB)",
				"SeperationofStudents@SeperationofClassA sort(asc(ID, true)) ~> RollNumberArrangement1",
				"SeperationofStudents@SeperationofClassB sort(asc(ID, true)) ~> RollNumberArrangement2",
				"RollNumberArrangement1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['ClassRoomA.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          ID,",
				"          Name,",
				"          Gender,",
				"          {Age },",
				"          Salary",
				"     ),",
				"     partitionBy('hash', 1)) ~> ClassRoomA",
				"RollNumberArrangement2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['ClassRoomB.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          ID,",
				"          Name,",
				"          Gender,",
				"          {Age },",
				"          Salary",
				"     ),",
				"     partitionBy('hash', 1)) ~> ClassRoomB"
			]
		}
	}
}